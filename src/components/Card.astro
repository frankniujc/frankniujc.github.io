---
import { getEntry } from 'astro:content';
import { slugifyStr } from "@utils/slugify";
import { processAuthor } from "@utils/processAuthor";

const { href, post } = Astro.props;
const { title, pubDatetime, modDatetime, description, venue, authors } = post.data;
const { paper, paper_linkname, code, talk, tags, poster } = post.data;

const headerProps = {
  style: { viewTransitionName: slugifyStr(title) },
  class: "text-lg font-medium decoration-dashed hover:underline",
};

const slug = Astro.props.post.slug;
const bibs = await Astro.glob(`../content/bibs/*.md`);

const bib = bibs.filter((bib) => bib.file.split('/').pop() == slug + '.md');

const BibEntry = bib[0].Content;
---

<li class="my-6">
  <div>
    <a
      href={href}
      class="inline-block text-lg font-medium text-skin-accent decoration-dashed underline-offset-4 focus-visible:no-underline focus-visible:underline-offset-0"
    >
    <h3 {...headerProps}>{title}</h3>
    </a>
  </div>
  <div>
  {authors.map((author, index) => (
      <span set:html={processAuthor(author, index, authors.length)} />
    ))
  }
  </div>
  <div>
  {
    paper && 
    <div style={{float : 'left', paddingRight : '8px'}}>
    <a href={paper} class="inline-block text-lg font-medium text-skin-base decoration-dashed underline-offset-4 focus-visible:no-underline hover:underline">
      [{paper_linkname}]
    </a>
    </div>
  }

  {
    code &&
    <div style={{float : 'left', paddingRight : '8px'}}>
    <a href={code} class="inline-block text-lg font-medium text-skin-base decoration-dashed underline-offset-4 focus-visible:no-underline hover:underline">
      [Code <ion-icon style="font-size: 20px;" name="logo-github"></ion-icon>]
    </a>
    </div>
  }

  {
    poster &&
    <div style={{float : 'left', paddingRight : '8px'}}>
    <a href={poster} class="inline-block text-lg font-medium text-skin-base decoration-dashed underline-offset-4 focus-visible:no-underline hover:underline">
      [Poster <ion-icon style="font-size: 20px;" name="easel-outline"></ion-icon>]
    </a>
    </div>
  }

  {
    talk &&
    <div style={{float : 'left', paddingRight : '8px'}}>
    <a href="code" class="inline-block text-lg font-medium text-skin-base decoration-dashed underline-offset-4 focus-visible:no-underline hover:underline">
      [Talk <ion-icon style="font-size: 20px;" name="videocam-outline"></ion-icon>]
    </a>
    </div>
  }

  {
    bib &&
    <div style={{float : 'left', paddingRight : '8px'}}>
    <a href=`javascript:toggleBibtex("${slugifyStr(title)}")` class="inline-block text-lg font-medium text-skin-base decoration-dashed underline-offset-4 focus-visible:no-underline hover:underline">
      [BibTeX <ion-icon style="font-size: 20px;" name="bookmark-outline"></ion-icon>]
    </a>
    </div>
  }

  </div>

  <div style={{clear: 'both'}} set:html={venue}/>
  {
    bib &&
    <div id={slugifyStr(title)} style={{clear: 'both', display: 'none'}}>
    <article class="prose mx-auto max-w-3xl">
      <BibEntry />
    </article>
    </div>
  }
</li>


<script is:inline>
  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  function toggleBibtex(x) {
    var e = document.getElementById(x);
    if (e.style.display=='none') {
        e.style.display='block';
    } else {
        e.style.display='none';
    }
  }
</script>
